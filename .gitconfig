[user]
  name = Ian Forsyth
  email = ian@ianforsyth.com
[alias]
  co = checkout
  cob = checkout -b
  ac = !git add -A && git commit -m
	bc = "!f() { base=$(git show-ref --verify --quiet refs/heads/main && echo main || echo master); git cherry -v \"$base\" --abbrev; }; f"
  amend = !git add . && git commit --amend --no-edit
  fixup = !sh -c 'REV=$(git rev-parse $1) && git add . && git commit --fixup $@ && GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash $REV^' -
  s = status
  bd = branch -D
	cleanup = "!f() { \n  echo \"Switching to master...\"; \n  git co master; \n  echo \"\"; \n  merged=$(git branch --merged | grep -v master); \n  unmerged=$(git branch | grep -v master | grep -v -F \"$merged\"); \n  if [ -n \"$merged\" ]; then \n    echo \"Branches that WILL BE DELETED (already merged):\"; \n    echo \"$merged\" | sed \"s/^/  - /\"; \n  else \n    echo \"No merged branches to delete.\"; \n  fi; \n  echo \"\"; \n  if [ -n \"$unmerged\" ]; then \n    echo \"Branches that WILL BE KEPT (not merged):\"; \n    echo \"$unmerged\" | sed \"s/^/  - /\"; \n    echo \"\"; \n  fi; \n  if [ -n \"$merged\" ]; then \n    echo -n \"Delete the merged branches? (y/N): \"; \n    read -r response; \n    if [ \"$response\" = \"y\" ] || [ \"$response\" = \"Y\" ]; then \n      echo \"$merged\" | xargs git branch -d; \n      echo \"Cleanup complete!\"; \n    else \n      echo \"Cleanup cancelled.\"; \n    fi; \n  fi; \n}; f"
  back = reset --soft HEAD~1
  rim = rebase -i master
  wip = !git add -A && git commit --no-verify -m "WIP"
  nah = !git add . && git reset --hard HEAD
  last = rev-parse --verify HEAD
	l = log -n 5 --pretty=format:'%h %s' --no-color
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f
[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[core]
  excludesfile = ~/.gitignore
[push]
  default = current
[http]
	sslVerify = false
[pull]
	rebase = true
[rebase]
	autoStash = true
[init]
	defaultBranch = main
